{
    "name": "extract-conffusion", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "checkpoints/maestro/maestro_22k_8s-750000"
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "datasets/celebahq/flist/train.flist",
                    "sample_rate": 22050,
                    "audio_len": 184184,
                    "load_len": 405000,
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "long",
                        "long": {
                            "gap_length": 250, // in ms
                            "start_gap_idx": "none"  //in ms, None means at the middle
                        },
                        "short": {
                            "num_gaps": 4,
                            "gap_length": 3000,  // in ms
                            "start_gap_idx": "none" // in ms, None means random. If not None this should be a list of length num_gaps
                        }
                    }
                }
            },
            "dataloader":{
                "default_file_name": "data.dataset_audio",
                "validation_split": 2, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 3, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 1, // batch size in each gpu
                    "num_workers": 1,
                    "shuffle": false,
                    "pin_memory": false,
                    "drop_last": false
                }
            }
        },

        "calibration": {
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "dldata/maestro-v3.0.0/splits/calibration/ground_truth",
                    "sampled_bounds_path": "dldata/maestro-v3.0.0/splits/calibration/sampled_bounds",
                    "data_len": -1,
                    "sample_rate": 22050,
                    "audio_len": 184184,
                    "load_len": 405000,
                    "mask_config": {
                        "mask_mode": "long",
                        "long": {
                            "gap_length": 100, // in ms
                            "start_gap_idx": "none"  //in ms, None means at the middle
                        },
                        "short": {
                            "num_gaps": 4,
                            "gap_length": 3000,  // in ms
                            "start_gap_idx": "none" // in ms, None means random. If not None this should be a list of length num_gaps
                        }
                    }
                }
            },
            "dataloader":{
                "default_file_name": "data.dataset_audio",
                "args":{
                    "batch_size": 1,
                    "num_workers": 1,
                    "pin_memory": false,
                    "shuffle": false,
                    "drop_last": false
                }
            }
        },
        "validation": {
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "dldata/maestro-v3.0.0/splits/validation/ground_truth",
                    "sampled_bounds_path": "dldata/maestro-v3.0.0/splits/validation/sampled_bounds",
                    "data_len": -1,
                    "sample_rate": 22050,
                    "audio_len": 184184,
                    "load_len": 405000,
                    "mask_config": {
                        "mask_mode": "long",
                        "long": {
                            "gap_length": 100, // in ms
                            "start_gap_idx": "none"  //in ms, None means at the middle
                        },
                        "short": {
                            "num_gaps": 4,
                            "gap_length": 3000,  // in ms
                            "start_gap_idx": "none" // in ms, None means random. If not None this should be a list of length num_gaps
                        }
                    }
                }
            },
            "dataloader":{
                "default_file_name": "data.dataset_audio",
                "args":{
                    "batch_size": 1,
                    "num_workers": 1,
                    "pin_memory": false,
                    "shuffle": false,
                    "drop_last": false
                }
            }
        },
        "test": {
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "dldata/maestro-v3.0.0/splits/test/ground_truth",
                    "sampled_bounds_path": "dldata/maestro-v3.0.0/splits/test/sampled_bounds",
                    "data_len": -1,
                    "sample_rate": 22050,
                    "audio_len": 184184,
                    "load_len": 405000,
                    "mask_config": {
                        "mask_mode": "long",
                        "long": {
                            "gap_length": 100, // in ms
                            "start_gap_idx": "none"  //in ms, None means at the middle
                        },
                        "short": {
                            "num_gaps": 4,
                            "gap_length": 3000,  // in ms
                            "start_gap_idx": "none" // in ms, None means random. If not None this should be a list of length num_gaps
                        }
                    }
                }
            },
            "dataloader":{
                "default_file_name": "data.dataset_audio",
                "args":{
                    "batch_size": 1,
                    "num_workers": 1,
                    "pin_memory": false,
                    "shuffle": false,
                    "drop_last": false
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
//                "sample_num": 8, // process of each image
                "sample_num": 1, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.audio_network", "Audio_Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py])
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "cqtdiff_maestro", // sr3 | guided_diffusion | cqtdiff_maestro
                    "unet": {
                        "device": "cuda", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                        "args": {
                        "network": {
                        "use_fencoding": false,
                        "use_norm": true,
                        "filter_out_cqt_DC_Nyq": true,
                        "depth": 7,
                        "emb_dim": 256,
                        "Ns": [
                            64,
                            96,
                            96,
                            128,
                            128,
                            256,
                            256
                        ],
                        "attention_layers": [
                            0,
                            0,
                            0,
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "Ss": [
                            2,
                            2,
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        "num_dils": [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            7
                        ],
                        "cqt": {
                            "window": "kaiser",
                            "beta": 1,
                            "num_octs": 7,
                            "bin_per_oct": 64
                        },
                        "bottleneck_type": "res_dil_convs",
                        "num_bottleneck_layers": 1,
                        "attention_dict": {
                            "num_heads": 8,
                            "attn_dropout": 0.0,
                            "bias_qkv": false,
                            "N": 0,
                            "rel_pos_num_buckets": 32,
                            "rel_pos_max_distance": 64,
                            "use_rel_pos": false,
                            "Nproj": 8
                        }}}},
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "cosine",
                            "n_timestep": 100,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        },
                         "calibration": {
                             "schedule": "cosine",
                            "n_timestep": 100,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        },
                        "validation": {
                            "schedule": "cosine",
                            "n_timestep": 100,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 5, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false // tensorboardX enable

    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    },

        "wandb": {
        "project": "Conffusion"
    }
}
